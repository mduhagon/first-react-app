{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","getRenderValue","state","value","getCellId","rowIndex","colIndex","getClasses","classes","isGivenValue","push","isSelected","isRelated","isIncorrect","join","board","handleClick","bind","this","cellClicked","val","setState","id","className","onClick","React","Component","Board","initialGame","selectedCell","rows","cols","boxes","iterRows","iterCols","counter","aCell","cell","cellRowIndex","cellColIndex","console","log","selected","iterRowCells","rowlist","map","d","i","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8e7cc96.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Cell extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value,\n            isGivenValue: props.value != 0, // we might need to change this if we 'reload' saved games\n            isSelected: false,\n            isRelated: false,\n            isIncorrect: false     \n        };\n\n        //these are never going to change so I keep them outside the state\n        this.board = props.board;\n        this.rowIndex = props.rowIndex;\n        this.colIndex = props.colIndex; \n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        // we let the board handle a click on the cell\n        this.board.cellClicked(this, this.rowIndex, this.colIndex);\n    }\n\n    selected(val) {\n        this.setState(state => ({\n            isSelected: val\n        }));\n    }\n\n    related(val) {\n        this.setState(state => ({\n            isRelated: val\n        }));\n    }\n    \n    // Empty cells internally are represented with 0,\n    // but we do not want to display this to the user.\n    getRenderValue = () => {\n        return (this.state.value == 0) ? '' : this.state.value;\n    }   \n    \n    getCellId = () => {\n        return 'cell' + (this.state.rowIndex+1) + '-' + (this.state.colIndex+1);\n    }   \n\n    getClasses = () => {\n        let classes = ['cell']; //all cells get the 'cell' class, and maybe additional:\n\n        if (this.state.isGivenValue) classes.push('given');\n        if (this.state.isSelected) classes.push('selected');\n        if (this.state.isRelated) classes.push('related');\n        if (this.state.isIncorrect) classes.push('wrong');\n        \n        return classes.join(' ');\n    }\n\n    render() {\n        return (\n            <td id={this.getCellId()} className={this.getClasses()} onClick={this.handleClick}>\n               {this.getRenderValue()}\n            </td>\n        );\n    }\n\n}","import React from 'react';\nimport Cell from './Cell';\n\nexport default class Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            initialGame: \"017030590000000403000006070120009050000402000060700021030600000901000000054020310\", // we don't want to hardcode this here forever\n            selectedCell: null\n        };\n\n        this.rows = []; // The board has 9 rows, with 9 Cells each\n        this.cols = []; // The board has 9 columns, with 9 Cells each\n        this.boxes = []; // these will be each of the 9 3x3 subgrids of the board\n\n        // Initialize Rows\n        for(let iterRows = 0; iterRows < 9; iterRows++) {\n            let aRow = [];\n            this.rows.push(aRow); \n        }    \n\n        // Initialize Cols\n        for(let iterCols = 0; iterCols < 9; iterCols++) {\n            let aCol = [];\n            this.cols.push(aCol); \n        }\n\n        let counter = 0;\n        for(let iterRows = 0; iterRows < 9; iterRows++) {\n            for(let iterCols = 0; iterCols < 9; iterCols++) {\n                let aCell = <Cell value={this.state.initialGame[counter++]} board={this} rowIndex={(iterRows)} colIndex={(iterCols)} />;\n                this.rows[iterRows].push(aCell);\n                this.cols[iterCols].push(aCell);\n            }   \n        }\n    }\n\n    cellClicked(cell, cellRowIndex, cellColIndex) {\n        console.log(\"Cell clicked, yay!\");\n\n        if (this.state.selectedCell != null) this.state.selectedCell.selected(false);\n        cell.selected(true);\n        this.state.selectedCell = cell;\n\n        console.log(cell);\n\n        // we want to highlight all cells in the same\n        // column / row / box as the selected cell\n        for(let iterRowCells = 0; iterRowCells < 9; iterRowCells++) {\n            if (iterRowCells != cellColIndex) { //we do not want to higlight the cell itself as 'related'\n                console.log(this.rows[cellRowIndex][iterRowCells]);\n                //this.rows[cellRowIndex][iterRowCells].selected(true);\n            }\n        }    \n\n    }\n\n    render() {\n        let rowlist = this.rows.map((d, i) => {\n            return <tr id={'row'+i}>{d}</tr>;\n        });\n\n        return (\n            <table className=\"board\">\n                <tbody>{rowlist}</tbody>\n            </table>\n        );\n    }\n}","import './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}