{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","getRenderValue","state","value","getCellId","rowIndex","colIndex","getClasses","classes","isGivenValue","push","isSelected","isRelated","isIncorrect","join","board","handleClick","bind","this","cellClicked","val","setState","id","className","onClick","React","Component","Board","initialGame","selectedCell","rawRows","rows","cols","boxes","iterRows","iterCols","counter","cellRef","createRef","aCell","ref","boxKey","getBoxSubArray","boxRow","boxCol","subArray","rowStart","colStart","rowEnd","colEnd","cell","cellRowIndex","cellColIndex","console","log","clearCellHighlights","selected","iterRowCells","current","related","iterColCells","boxIndex","getBoxIndex","boxArray","index","length","toHighlight","rowlist","map","d","i","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAEqBA,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAqCVC,eAAiB,WACb,OAA4B,GAApB,EAAKC,MAAMC,MAAc,GAAK,EAAKD,MAAMC,OAvClC,EA0CnBC,UAAY,WACR,MAAO,QAAU,EAAKF,MAAMG,SAAS,GAAK,KAAO,EAAKH,MAAMI,SAAS,IA3CtD,EA8CnBC,WAAa,WACT,IAAIC,EAAU,CAAC,QAOf,OALI,EAAKN,MAAMO,cAAcD,EAAQE,KAAK,SACtC,EAAKR,MAAMS,YAAYH,EAAQE,KAAK,YACpC,EAAKR,MAAMU,WAAWJ,EAAQE,KAAK,WACnC,EAAKR,MAAMW,aAAaL,EAAQE,KAAK,SAElCF,EAAQM,KAAK,MApDpB,EAAKZ,MAAQ,CACTC,MAAOH,EAAMG,MACbM,aAA6B,GAAfT,EAAMG,MACpBQ,YAAY,EACZC,WAAW,EACXC,aAAa,GAIjB,EAAKE,MAAQf,EAAMe,MACnB,EAAKV,SAAWL,EAAMK,SACtB,EAAKC,SAAWN,EAAMM,SAGtB,EAAKU,YAAc,EAAKA,YAAYC,KAAjB,gBAhBJ,E,+CAmBnB,WAEIC,KAAKH,MAAMI,YAAYD,KAAMA,KAAKb,SAAUa,KAAKZ,Y,sBAGrD,SAASc,GACLF,KAAKG,UAAS,SAAAnB,GAAK,MAAK,CACpBS,WAAYS,Q,qBAIpB,SAAQA,GACJF,KAAKG,UAAS,SAAAnB,GAAK,MAAK,CACpBU,UAAWQ,Q,oBAyBnB,WACI,OACI,oBAA2BE,GAAIJ,KAAKd,YAAamB,UAAWL,KAAKX,aAAciB,QAASN,KAAKF,YAA7F,SACIE,KAAKjB,kBADAiB,KAAKd,iB,GA7DQqB,IAAMC,WCCnBC,E,kDACjB,WAAY3B,GAAQ,IAAD,uBACf,cAAMA,IACDE,MAAQ,CACT0B,YAAa,oFACbC,aAAc,MAGlB,EAAKC,QAAU,GACf,EAAKC,KAAO,GACZ,EAAKC,KAAO,GACZ,EAAKC,MAAQ,GAGb,IAAI,IAAIC,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAE5C,EAAKJ,QAAQpB,KADF,IAKf,IAAI,IAAIwB,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAE5C,EAAKH,KAAKrB,KADC,IAKf,IAAI,IAAIyB,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAE5C,EAAKH,KAAKtB,KADC,IAKf,IADA,IAAI0B,EAAU,EACNF,EAAW,EAAGA,EAAW,EAAGA,IAChC,IAAI,IAAIC,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAC5C,IAAIE,EAAUZ,IAAMa,YAChBC,EAAQ,cAAC,EAAD,CAAMC,IAAKH,EAASlC,MAAO,EAAKD,MAAM0B,YAAYQ,KAAYrB,MAAK,eAAQV,SAAW6B,EAAW5B,SAAW6B,IACxH,EAAKJ,KAAKG,GAAUxB,KAAK2B,GACzB,EAAKL,KAAKG,GAAUzB,KAAK2B,GAEzB,EAAKP,QAAQI,GAAUxB,KAAK6B,GASpC,IAAI,IAAIL,EAAW,EAAGA,EAAW,EAAGA,IAChC,IAAI,IAAIC,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAC5C,IAAIM,EAAS,OAASP,EAAW,IAAMC,EACvC,EAAKF,MAAMQ,GAAU,EAAKC,eAAeR,EAAUC,GAlD5C,S,kDAuDnB,SAAeQ,EAAQC,GAQnB,IAPA,IAAIC,EAAW,GAEXC,EAAoB,EAATH,EACXI,EAAoB,EAATH,EACXI,EAASF,EAAW,EACpBG,EAASF,EAAW,EAEhBb,EAAWY,EAAUZ,EAAWc,EAAQd,IAC5C,IAAI,IAAIC,EAAWY,EAAUZ,EAAWc,EAAQd,IAC5CU,EAASnC,KAAKQ,KAAKa,KAAKG,GAAUC,IAI1C,OAAOU,I,yBAGX,SAAYK,EAAMC,EAAcC,GAC5BC,QAAQC,IAAI,sBAEZpC,KAAKqC,sBAELL,EAAKM,UAAS,GACdtC,KAAKhB,MAAM2B,aAAeqB,EAE1BG,QAAQC,IAAIJ,GAMZ,IAAI,IAAIO,EAAe,EAAGA,EAAe,EAAGA,IACxCvC,KAAKa,KAAKoB,GAAcM,GAAcC,QAAQC,SAAQ,GAI1D,IAAI,IAAIC,EAAe,EAAGA,EAAe,EAAGA,IACxC1C,KAAKc,KAAKoB,GAAcQ,GAAcF,QAAQC,SAAQ,GAI1D,IAAIE,EAAW3C,KAAK4C,YAAYX,EAAcC,GAC9CC,QAAQC,IAAI,cAAeO,GAE3B,IADA,IAAIE,EAAW7C,KAAKe,MAAM4B,GACjBG,EAAQ,EAAGA,EAAQD,EAASE,OAAQD,IACzCD,EAASC,GAAON,QAAQC,SAAQ,GAKpC,GAAwB,GAApBT,EAAKhD,MAAMC,MAEX,IADA,IAAI+D,EAAchB,EAAKhD,MAAMC,MACrBsD,EAAe,EAAGA,EAAe,EAAGA,IACxC,IAAI,IAAIG,EAAe,EAAGA,EAAe,EAAGA,IACpC1C,KAAKa,KAAK0B,GAAcG,GAAcF,QAAQxD,MAAMC,OAAS+D,GAC7DhD,KAAKa,KAAK0B,GAAcG,GAAcF,QAAQF,UAAS,K,iCAO3E,WACI,IAAI,IAAIC,EAAe,EAAGA,EAAe,EAAGA,IACxC,IAAI,IAAIG,EAAe,EAAGA,EAAe,EAAGA,IACxC1C,KAAKa,KAAK0B,GAAcG,GAAcF,QAAQF,UAAS,GACvDtC,KAAKa,KAAK0B,GAAcG,GAAcF,QAAQC,SAAQ,K,yBAOlE,SAAYR,EAAcC,GAGtB,MAAO,QAFUD,EAAa,GAAG,GAEL,KADXC,EAAa,GAAG,K,oBAIrC,WACI,IAAIe,EAAUjD,KAAKY,QAAQsC,KAAI,SAACC,EAAGC,GAC/B,OAAO,6BAAmBD,GAAV,MAAMC,MAG1B,OACI,uBAAO/C,UAAU,QAAjB,SACI,gCAAQ4C,U,GA9IW1C,IAAMC,WCQ1B6C,MARf,WACE,OACE,qBAAKhD,UAAU,MAAf,SACE,cAAC,EAAD,OCMSiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a13e6f28.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Cell extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value,\n            isGivenValue: props.value != 0, // we might need to change this if we 'reload' saved games\n            isSelected: false,\n            isRelated: false,\n            isIncorrect: false     \n        };\n\n        //these are never going to change so I keep them outside the state\n        this.board = props.board;\n        this.rowIndex = props.rowIndex;\n        this.colIndex = props.colIndex; \n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        // we let the board handle a click on the cell\n        this.board.cellClicked(this, this.rowIndex, this.colIndex);\n    }\n\n    selected(val) {\n        this.setState(state => ({\n            isSelected: val\n        }));\n    }\n\n    related(val) {\n        this.setState(state => ({\n            isRelated: val\n        }));\n    }\n    \n    // Empty cells internally are represented with 0,\n    // but we do not want to display this to the user.\n    getRenderValue = () => {\n        return (this.state.value == 0) ? '' : this.state.value;\n    }   \n    \n    getCellId = () => {\n        return 'cell' + (this.state.rowIndex+1) + '-' + (this.state.colIndex+1);\n    }   \n\n    getClasses = () => {\n        let classes = ['cell']; //all cells get the 'cell' class, and maybe additional:\n\n        if (this.state.isGivenValue) classes.push('given');\n        if (this.state.isSelected) classes.push('selected');\n        if (this.state.isRelated) classes.push('related');\n        if (this.state.isIncorrect) classes.push('wrong');\n        \n        return classes.join(' ');\n    }\n\n    render() {\n        return (\n            <td key={this.getCellId()} id={this.getCellId()} className={this.getClasses()} onClick={this.handleClick}>\n               {this.getRenderValue()}\n            </td>\n        );\n    }\n\n}","import React from 'react';\nimport Cell from './Cell';\n\nexport default class Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            initialGame: \"017030590000000403000006070120009050000402000060700021030600000901000000054020310\", // we don't want to hardcode this here forever\n            selectedCell: null\n        };\n\n        this.rawRows = []; // This will hold the actual <Cell ../> definitions to render\n        this.rows = []; // The board has 9 rows, with 9 Cells each (here we use a ref to the Cell)\n        this.cols = []; // The board has 9 columns, with 9 Cells each (here we use a ref to the Cell)\n        this.boxes = {}; // these will be each of the 9 3x3 subgrids of the board (here we use a ref to the Cell)\n\n        // Initialize Raw Rows\n        for(let iterRows = 0; iterRows < 9; iterRows++) {\n            let aRow = [];\n            this.rawRows.push(aRow); \n        }\n\n        // Initialize Rows\n        for(let iterRows = 0; iterRows < 9; iterRows++) {\n            let aRow = [];\n            this.rows.push(aRow); \n        }    \n\n        // Initialize Cols\n        for(let iterCols = 0; iterCols < 9; iterCols++) {\n            let aCol = [];\n            this.cols.push(aCol); \n        }\n\n        let counter = 0;\n        for(let iterRows = 0; iterRows < 9; iterRows++) {\n            for(let iterCols = 0; iterCols < 9; iterCols++) {\n                let cellRef = React.createRef();\n                let aCell = <Cell ref={cellRef} value={this.state.initialGame[counter++]} board={this} rowIndex={(iterRows)} colIndex={(iterCols)} />;\n                this.rows[iterRows].push(cellRef);\n                this.cols[iterCols].push(cellRef);\n\n                this.rawRows[iterRows].push(aCell);\n            }   \n        }\n\n        // Initialize the 'boxes'\n        // they will be in a dictionary with keys like this:\n        // box_0_0 / box_0_1 / box_0_2 / box_1_0 / .... / box_2_2\n        // the elements on the box are 'flattened' into an array\n        // (we do not maintain rows/cols in it)\n        for(let iterRows = 0; iterRows < 3; iterRows++) {\n            for(let iterCols = 0; iterCols < 3; iterCols++) {\n                let boxKey = 'box_' + iterRows + '_' + iterCols;\n                this.boxes[boxKey] = this.getBoxSubArray(iterRows, iterCols);\n            }\n        }        \n    }\n\n    getBoxSubArray(boxRow, boxCol) {\n        let subArray = [];\n\n        let rowStart = boxRow * 3;\n        let colStart = boxCol * 3;\n        let rowEnd = rowStart + 3;\n        let colEnd = colStart + 3;\n\n        for(let iterRows = rowStart; iterRows < rowEnd; iterRows++) {\n            for(let iterCols = colStart; iterCols < colEnd; iterCols++) {\n                subArray.push(this.rows[iterRows][iterCols]);\n            }    \n        }    \n\n        return subArray;\n    }\n\n    cellClicked(cell, cellRowIndex, cellColIndex) {\n        console.log(\"Cell clicked, yay!\");\n\n        this.clearCellHighlights();\n\n        cell.selected(true);\n        this.state.selectedCell = cell;\n\n        console.log(cell);\n        \n        // we want to highlight all cells in the same\n        // column / row / box as the selected cell\n\n        // highlight row\n        for(let iterRowCells = 0; iterRowCells < 9; iterRowCells++) {\n            this.rows[cellRowIndex][iterRowCells].current.related(true);\n        }\n        \n        // highlight col\n        for(let iterColCells = 0; iterColCells < 9; iterColCells++) {\n            this.cols[cellColIndex][iterColCells].current.related(true);\n        }\n\n        // highlight box\n        let boxIndex = this.getBoxIndex(cellRowIndex, cellColIndex);\n        console.log(\"Box index: \", boxIndex);\n        let boxArray = this.boxes[boxIndex];\n        for (let index = 0; index < boxArray.length; index++) {\n            boxArray[index].current.related(true);\n        }\n\n        // If the selected cell is not empty, we also want to highlight the\n        // same number across the board (all 1s, or all 2s, etc)\n        if (cell.state.value != 0) {\n            let toHighlight = cell.state.value;\n            for(let iterRowCells = 0; iterRowCells < 9; iterRowCells++) {\n                for(let iterColCells = 0; iterColCells < 9; iterColCells++) {\n                    if (this.rows[iterRowCells][iterColCells].current.state.value == toHighlight) {\n                        this.rows[iterRowCells][iterColCells].current.selected(true);\n                    }\n                }\n            }        \n        }\n    }\n\n    clearCellHighlights() {\n        for(let iterRowCells = 0; iterRowCells < 9; iterRowCells++) {\n            for(let iterColCells = 0; iterColCells < 9; iterColCells++) {\n                this.rows[iterRowCells][iterColCells].current.selected(false);\n                this.rows[iterRowCells][iterColCells].current.related(false);\n            }    \n        }    \n    }\n\n    // given a cell, retuns which box it belongs to,    \n    // the boxIndex can be used as an index / key for this.boxes\n    getBoxIndex(cellRowIndex, cellColIndex) {\n        let rowBoxIdx = (cellRowIndex/3>>0);\n        let colBoxIdx = (cellColIndex/3>>0);\n        return 'box_' + rowBoxIdx + '_' + colBoxIdx;\n    }\n\n    render() {\n        let rowlist = this.rawRows.map((d, i) => {\n            return <tr key={'row'+i}>{d}</tr>;\n        });\n\n        return (\n            <table className=\"board\">\n                <tbody>{rowlist}</tbody>\n            </table>\n        );\n    }\n}","import './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}